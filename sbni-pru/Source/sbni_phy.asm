	.cdecls C, LIST, "pru_sbni.h"
	.cdecls C, LIST, "sbni_gpio.h"

	.ref ||TX_P||
	.ref ||TX_N||
	.ref ||BYTE_LENGTH||
	.ref ||HALF_BYTE_LENGTH||

	.sect ".text:__transmit_byte"
	.global ||__transmit_byte||

;*--------------------------------------------------------------------------------------*
;* void __transmit_byte(unsigned char byte)
;*
;* @ Brief:  Функция передаёт 1 байт по протоколу SBNI с заранее заданной скоростью
;* @ Param:  byte: Передаваемый байт
;* @ Return: Нет
;*--------------------------------------------------------------------------------------*

||__transmit_byte||:
;*--------------------------------------------------------------------------------------*
	SUB		r2, r2, 0x03				; выделить память в стеке
	SBBO	&r3.b2, r2, 1, 2			; сохранить адрес возврата
	SBBO	&r14.b0, r2, 0, 1			; сохранить аргумент
	LDI		r15, ||BYTE_LENGTH||		; значение задержки для лог. "0"
	LDI		r16, ||HALF_BYTE_LENGTH||	; значение задержки для лог. "1"
	LDI		r19, ||TX_P||				; номер пина TX_P
	LDI		r20, ||TX_N||				; номер пина TX_N
	LDI 	r0.w0, 0x01					; битовая маска
	LSL		r21, r0, r19				; бит, отвечающий за TX_P
;*--------------------------------------------------------------------------------------*
||$C$L1||:								; MAINLOOP
	QBGT	||$C$L8||, r0.w0, 0xFF		; переход к EXIT если маска больше 11111111b
	AND		r1, r14.w0, r0.w0			; выбор бита для передачи
	LSL		r17, r17, 1					; сдвиг маски влево на 1 бит
	QBNE 	||$C$L3||, r1, 0x00			; переход к TRANSMIT_HIGH, если бит != 0
;*--------------------------------------------------------------------------------------*
||$C$L2||:								; TRANSMIT_LOW
	JAL		r3.w2, ||$C$L5||			; переход к TOGGLE с возвратом
	SUB		r18, r15, 14				; отнять кол-во полезных операций от задержки
	JAL		r3.w2, ||$C$L4||			; переход к DELAY с возвратом
	JMP		||$C$L1||					; переход к MAINLOOP
;*--------------------------------------------------------------------------------------*
||$C$L3||:								; TRANSMIT_HIGH
	JAL		r3.w2, ||$C$L5||			; переход к TOGGLE с возвратом
	SUB 	r18, r16, 8					; отнять кол-во полезных операций от 1 задержки
	JAL		r3.w2, ||$C$L4||			; переход к DELAY с возвратом
	JAL		r3.w2, ||$C$L5||			; переход к TOGGLE с возвратом
	SUB		r18, r16, 14				; отнять кол-во полезных операций от 2 задержки
	JAL 	r3.w2, ||$C$L4||			; переход к DELAY с возвратом
	JMP		||$C$L1||					; переход к MAINLOOP
;*--------------------------------------------------------------------------------------*
||$C$L4||:								; DELAY
	SUB  	r18, r18, 2					; уменьшить счётчик на 2
	QBGT 	||$C$L4||, r18, 0			; переход к DELAY если счётчик > 0
	JMP		r3.w2						; возврат к предыдущей секции
;*--------------------------------------------------------------------------------------*
||$C$L5||:								; TOGGLE
	AND		r1, r30, r21				; выбор бита SBNI_TX_P регистра R30
	QBNE	||$C$L7||, r1, 0x00			; переход к RESET, если этот бит != 0
;*--------------------------------------------------------------------------------------*
||$C$L6||:								; SET
	SET		r30, r30, r19				; установить бит SBNI_TX_P
	CLR		r30, r30, r20				; сбросить бит SBNI_TX_N
	JMP		r3.w2						; возврат к предыдущей секции
;*--------------------------------------------------------------------------------------*
||$C$L7||:								; RESET
	CLR		r30, r30, r19				; сбросить бит SBNI_TX_P
	SET		r30, r30, r20				; установить бит SBNI_TX_N
	JMP		r3.w2						; возврат к предыдущей секции
;*--------------------------------------------------------------------------------------*
||$C$L8||:								; EXIT
	CLR		r30, r30, r19				; сбросить бит SBNI_TX_P
	SET		r30, r30, r20				; установить бит SBNI_TX_N
	LBBO	&r3.b2, r2, 1, 2			; загрузить адрес возврата
	ADD		r2, r2, 0x03				; освободить память в стеке
	JMP		r3.w2						; перейти к адресу возврата
;*--------------------------------------------------------------------------------------*

	.sect ".text:__receive_byte"
	.global ||__receive_byte||

;*--------------------------------------------------------------------------------------*
;* unsigned char __receive_byte(void)
;*
;* @ Brief:  Функция принимает 1 байт по протоколу SBNI с заранее заданной скоростью
;* @ Param:  Нет
;* @ Return: Принятый байт
;*--------------------------------------------------------------------------------------*

||__receive_byte||:
;*--------------------------------------------------------------------------------------*
	SUB		r2, r2, 2					; выделить память в стеке
	SBBO	&r3.w2, r2, 0, 2			; сохранить адрес возврата
	LDI		r1, 0x00					; обнулить регистр r16 для счётчика принятых бит
	LDI		r14, 0x00					; обнулить регистр r14 для возвращаемого значения
;*--------------------------------------------------------------------------------------*
||$C$L9||:								; MAINLOOP
	WBS		r31, 28						; ждать установки бита CNT_16
	MOV		r0.w0, r31.w0				; сохранить 16 бит из R31 в R0
	AND		r0.b0, r0.b0, 0x82			; наложить маску 10000100b на 1 байт
	AND		r0.b1, r0.b1, 0x82			; наложить маску 10000100b на 2 байт
	QBEQ	||$C$L10||, r0.b0, 0x00		; если 1 байт == 00000000b переход к SKIP_1
	QBEQ	||$C$L10||, r0.b0, 0x82		; если 1 байт == 10000100b переход к SKIP_1
	SET		r14.b0, r14.b0, r1			; иначе установить r1-й бит r14.b0 в "1"
||$C$L10||:								; SKIP_1
	ADD		r1, r1, 1					; увеличить счётчик r1
	QBEQ	||$C$L11||, r0.b1, 0x00		; если 2 байт == 00000000b переход к SKIP_2
	QBEQ	||$C$L11||, r0.b1, 0x82		; если 2 байт == 10000100b переход к SKIP_2
	SET		r14.b0, r14.b0, r1			; иначе установить r1-й бит r14.b0 в "1"
||$C$L11||:								; SKIP_2
	ADD		r1, r1, 1					; увеличить счётчик r1
	QBEQ	||$C$L12||, r1, 0x08		; перейти к EXIT если счётчик == 8
	JMP		||$C$L9||					; иначе перейти к MAINLOOP
;*--------------------------------------------------------------------------------------*
||$C$L12||:								; EXIT
	LBBO	&r3.b2, r2, 0, 2			; загрузить адрес возврата
	ADD		r2, r2, 2					; освободить память в стеке
	JMP		r3.w2						; перейти к адресу возврата
